# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества.
# Затем пользователь вводит сами элементы множеств.


n = int(input("Введите количество элементов в первом множестве: "))
m = int(input("Введите количество элементов во втором множестве: "))
first = set()
second = set()

for i in range(n):
    element = int(input("Введите элементы первого множества: "))
    first.add(element)

for i in range(m):
    element = int(input("Введите элементы второго множества: "))
    second.add(element)

intersection = first.intersection(second)
res = sorted(list(intersection))

if res:
    for element in res:
        print(element)
else:
    print("Нет совпадений")

# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, причём кусты высажены только по окружности. Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких собирающих модулей. Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.

# Максимальное число ягод
def max_berry_harvest(bushes):
    n = len(bushes)
    max_harvest = 0

    for i in range(n):
        # Индексы двух соседних кустов
        left = (i - 1 + n) % n
        right = (i + 1) % n

        # Текущий урожай и сумма урожая соседних кустов
        current_harvest = bushes[i]
        neighbors_harvest = bushes[left] + bushes[right]

        # Максимальный урожай, который можно собрать перед текущим кустом
        harvest = current_harvest + neighbors_harvest

        # Обновляем максимальный урожай, если он больше предыдущего максимума
        max_harvest = max(max_harvest, harvest)

    return max_harvest

b = []
n = int(input("Введите количество кустов: "))
for i in range(n):
    element = int(input(f"Введите урожай с куста {i + 1}: "))
    b.append(element)

# Вызываем функцию и выводим результат
result = max_berry_harvest(b)
print("Максимальное количество ягод, которое можно собрать:", result)
